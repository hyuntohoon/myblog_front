---
import Layout from '@layouts/layout.astro'
import Seo from '@components/seo.astro'
import Spacer from '@components/spacer.astro'
---

<Layout>
  <Seo slot="seo" title="Write a new post" />

  <div class="max-w-3xl mx-auto p-6">
    <h1 class="text-2xl font-bold mb-6">Write a new post</h1>

    <form id="write-form" class="space-y-6">
      <!-- 제목 -->
      <div>
        <label class="block font-medium mb-1">Title</label>
        <input type="text" name="title" class="w-full border p-2 rounded" required />
      </div>

      <!-- 카테고리 (동적 로딩 + 추가) -->
      <div>
        <label class="block font-medium mb-1">Category</label>
        <div class="flex items-center gap-2">
          <select name="category" id="category" class="border p-2 rounded flex-1">
            <option disabled selected>Loading...</option>
          </select>
          <button type="button" id="add-category" class="border border-dashed px-3 py-1 rounded text-sm hover:bg-muted">
            + Add
          </button>
        </div>
        <p id="catHelp" class="text-xs text-faded mt-1 hidden">No categories yet. You can add one.</p>
      </div>

      <!-- Music Review 옵션 토글 -->
      <div class="flex items-center gap-2">
        <input type="checkbox" id="enableReview" name="enableReview" class="w-4 h-4" />
        <label for="enableReview" class="font-medium">Add Music Review</label>
      </div>

      <!-- Music Review (옵셔널) -->
      <fieldset id="musicReview" class="border rounded p-4 space-y-4 hidden">
        <legend class="font-semibold text-lg">🎧 Music Review</legend>

        <!-- 1) 대상 선택 -->
        <div>
          <label class="block font-medium mb-1">Target Type</label>
          <select name="reviewType" id="reviewType" class="border p-2 rounded w-full">
            <option value="">Select...</option>
            <option value="album">Album</option>
            <option value="track">Track</option>
          </select>
        </div>

        <!-- 2) 앨범/트랙 선택 (더미) + 이미지 프리뷰 -->
        <div>
          <label class="block font-medium mb-1">Select Album/Track</label>
          <select name="albumId" id="albumId" class="border p-2 rounded w-full">
            <option value="">(Dummy Data)</option>
            <option value="1">NewJeans - Super Shy</option>
            <option value="2">IU - Love wins all</option>
            <option value="3">LE SSERAFIM - Easy</option>
          </select>

          <div id="albumPreview" class="mt-2 hidden">
            <img src="" alt="Album preview" class="rounded shadow w-32" />
          </div>
        </div>

        <!-- 평점 -->
        <div>
          <label class="block font-medium mb-1">Rating (1–10)</label>
          <input
            type="number"
            name="rating"
            class="border p-2 rounded w-24"
            min="1"
            max="10"
            step="0.5"
          />
        </div>
      </fieldset>

      <!-- 본문 (Markdown/MDX) -->
      <div>
        <label class="block font-medium mb-1">Content (Markdown)</label>
        <textarea
          name="content"
          class="w-full border p-2 rounded font-mono text-sm"
          rows="12"
          placeholder="# Heading\n\nWrite here..."
        ></textarea>
      </div>

      <button
        type="submit"
        class="bg-highlight text-white px-4 py-2 rounded hover:bg-opacity-80"
      >
        Save Draft
      </button>
    </form>

    <Spacer axis="vertical" size={8} />
  </div>

  <script>
    const $ = (s) => document.querySelector(s)

    const form = $('#write-form')
    const categorySel = $('#category')
    const catHelp = $('#catHelp')
    const addBtn = $('#add-category')

    const enableReview = $('#enableReview')
    const reviewSection = $('#musicReview')
    const albumSelect = $('#albumId')
    const albumPreview = $('#albumPreview')
    const albumImage = albumPreview.querySelector('img')

    // 더미 이미지 데이터
    const albumImages = {
      1: 'https://i.scdn.co/image/ab67616d0000b273f3f8ed949a4f79f5ad5caa7c',
      2: 'https://i.scdn.co/image/ab67616d0000b273a9a5fd746f62bcee3e6a9db7',
      3: 'https://i.scdn.co/image/ab67616d0000b273620e42f6a19cfb459dbf5566',
    }

    // 카테고리 동적 로딩
    async function loadCategories() {
      try {
        const res = await fetch('/api/categories.json', { cache: 'no-store' })
        if (!res.ok) throw new Error('HTTP ' + res.status)
        const { categories } = await res.json()

        categorySel.innerHTML = ''
        if (!categories || categories.length === 0) {
          catHelp.classList.remove('hidden')
          const opt = document.createElement('option')
          opt.value = ''
          opt.textContent = '(no categories)'
          categorySel.appendChild(opt)
          categorySel.value = ''
          return
        }

        catHelp.classList.add('hidden')
        const frag = document.createDocumentFragment()
        const placeholder = document.createElement('option')
        placeholder.value = ''
        placeholder.textContent = 'Select category...'
        placeholder.selected = true
        placeholder.disabled = true
        frag.appendChild(placeholder)

        categories.forEach((name) => {
          const opt = document.createElement('option')
          opt.value = name
          opt.textContent = name
          frag.appendChild(opt)
        })
        categorySel.appendChild(frag)
      } catch (e) {
        categorySel.innerHTML = ''
        const opt = document.createElement('option')
        opt.value = ''
        opt.textContent = '(failed to load categories)'
        categorySel.appendChild(opt)
        categorySel.value = ''
        catHelp.classList.remove('hidden')
      }
    }

    // 카테고리 추가(백엔드로 POST, 실패 시에도 UI는 갱신)
    async function addCategory(name) {
      try {
        const r = await fetch('/api/categories', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name }),
        })
        if (r.ok) {
          const json = await r.json()
          // persisted가 false면 임시 UI만 갱신 (백엔드 없을 때)
          return json?.name || name
        }
      } catch {}
      return name
    }

    addBtn.addEventListener('click', async () => {
      const name = prompt('새 카테고리 이름을 입력하세요:')
      if (!name) return
      const trimmed = name.trim()
      if (!trimmed) return
      const exists = Array.from(categorySel.options).some((o) => o.value === trimmed)
      if (exists) {
        categorySel.value = trimmed
        return
      }
      const saved = await addCategory(trimmed)
      const opt = document.createElement('option')
      opt.value = saved
      opt.textContent = saved
      categorySel.appendChild(opt)
      categorySel.value = saved
    })

    // 리뷰 토글
    enableReview.addEventListener('change', () => {
      reviewSection.classList.toggle('hidden', !enableReview.checked)
    })

    // 앨범 이미지 미리보기
    albumSelect.addEventListener('change', () => {
      const id = albumSelect.value
      if (id && albumImages[id]) {
        albumPreview.classList.remove('hidden')
        albumImage.src = albumImages[id]
      } else {
        albumPreview.classList.add('hidden')
      }
    })

    // 제출: slug 자동 생성 + 리뷰/본문 포함
    form.addEventListener('submit', (e) => {
      e.preventDefault()
      const data = Object.fromEntries(new FormData(form))

      const slug = String(data.title || '')
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '') || 'untitled'

      const payload = {
        title: data.title?.toString().trim() || '',
        slug,
        date: new Date().toISOString().split('T')[0],
        category: data.category?.toString().trim() || '',
        description: '',            // 스키마상 optional이지만 빈 문자열로
        draft: false,
        searchIndex: true,
        albumIds: [],               // 나중에 백엔드 연동 시 실제로 채움
        body: data.content?.toString() || '',
      }

      // 리뷰가 켜진 경우만 포함
      if (document.getElementById('enableReview').checked) {
        const reviewType = (data.reviewType || '').toString()
        const rating = parseFloat(String(data.rating || ''))
        const albumId = (data.albumId || '').toString()

        if (reviewType && !Number.isNaN(rating)) {
          payload.musicReview = {
            subject: reviewType,                   // 'album' | 'track'
            title: '',                             // 백엔드에서 앨범/트랙 정보로 채워도 됨
            artists: [],
            genres: [],
            rating: { value: rating, scale: 10 },
            favoriteTracks: [],
            tracks: [],
            links: undefined,
            releaseDate: undefined,
            cover: undefined,
          }
          if (albumId) {
            // 지금은 dummy: albumIds에 참고 값만 넣어둠
            payload.albumIds = [albumId]
          }
        }
      }

      console.log('📝 New Post Payload:', payload)
      alert('작성 완료 (현재는 로컬 미리보기). 콘솔을 확인하세요.')
      // TODO: 나중에 FastAPI 연결
      // fetch('/api/write', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) })
    })

    document.addEventListener('DOMContentLoaded', loadCategories)
  </script>
</Layout>